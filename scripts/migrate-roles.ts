import { db } from "../lib/db-script";

/**
 * Script de migra√ß√£o para converter roles de string para ENUM
 * Mapeia valores antigos para novos valores padronizados
 */

async function migrateRoles() {
  console.log("üîÑ Iniciando migra√ß√£o de roles...");

  try {
    // Mapeamento de migra√ß√£o
    const roleMapping: Record<string, "ADMIN" | "USER" | "MODERATOR"> = {
      "admin": "ADMIN",
      "user": "USER", 
      "moderator": "MODERATOR",
      "administrator": "ADMIN",
      "mod": "MODERATOR",
      // Adicione outros casos conforme necess√°rio
    };

    // Buscar todos os usu√°rios
    const users = await db.user.findMany();
    console.log(`üìä Encontrados ${users.length} usu√°rios para migrar`);

    let migratedCount = 0;
    let errorCount = 0;

    for (const user of users) {
      try {
        const currentRole = user.role as string;
        const newRole = roleMapping[currentRole.toLowerCase()] || "USER";
        
        await db.user.update({
          where: { id: user.id },
          data: { role: newRole }
        });

        console.log(`‚úÖ ${user.name}: "${currentRole}" ‚Üí "${newRole}"`);
        migratedCount++;
        
      } catch (error) {
        console.error(`‚ùå Erro ao migrar usu√°rio ${user.name}:`, error);
        errorCount++;
      }
    }

    console.log(`\nüìà Migra√ß√£o conclu√≠da:`);
    console.log(`   ‚úÖ Migrados: ${migratedCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);

  } catch (error) {
    console.error("üí• Erro durante a migra√ß√£o:", error);
  } finally {
    await db.$disconnect();
  }
}

// Executar apenas se chamado diretamente
if (require.main === module) {
  migrateRoles();
}

export { migrateRoles };